"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const free_cashflow_1 = __importDefault(require("./src/cashflow/free-cashflow"));
const discounted_cashflow_1 = __importDefault(require("./src/dcf/discounted-cashflow"));
const discount_rate_1 = __importDefault(require("./src/input-variables/discount-rate"));
const growth_rate_1 = __importDefault(require("./src/input-variables/variables/growth-rate"));
const margin_1 = __importDefault(require("./src/input-variables/variables/margin"));
const tax_rate_1 = __importDefault(require("./src/input-variables/variables/tax-rate"));
const expense_1 = __importDefault(require("./src/line-item/line-items.ts/expense"));
const revenue_1 = __importDefault(require("./src/line-item/line-items.ts/revenue"));
let myDcf = new discounted_cashflow_1.default();
let discountRate = new discount_rate_1.default(0.2);
let tax = new tax_rate_1.default(0.2);
let cf0 = new free_cashflow_1.default(0, myDcf, discountRate, tax);
let cf1 = new free_cashflow_1.default(1, myDcf, discountRate, tax);
let cf2 = new free_cashflow_1.default(2, myDcf, discountRate, tax);
let cf3 = new free_cashflow_1.default(3, myDcf, discountRate, tax);
let cf4 = new free_cashflow_1.default(4, myDcf, discountRate, tax);
let cf5 = new free_cashflow_1.default(5, myDcf, discountRate, tax);
let baseRev = new revenue_1.default(100, new growth_rate_1.default(0));
let nextRev = new revenue_1.default(0, new growth_rate_1.default(0.1));
let expense = new expense_1.default(0, new margin_1.default(0.1));
//revenues
cf0.addLineItem(baseRev);
cf1.addLineItem(nextRev);
cf2.addLineItem(nextRev);
cf3.addLineItem(nextRev);
cf4.addLineItem(nextRev);
cf5.addLineItem(nextRev);
//adding expenses
cf0.addLineItem(expense);
cf1.addLineItem(expense);
cf2.addLineItem(expense);
cf3.addLineItem(expense);
cf4.addLineItem(expense);
cf5.addLineItem(expense);
myDcf.addCashflow(cf0);
myDcf.addCashflow(cf1);
myDcf.addCashflow(cf2);
myDcf.addCashflow(cf3);
myDcf.addCashflow(cf4);
myDcf.addCashflow(cf5);
myDcf.calculatePresentValue();
console.log(myDcf.presentValue);
